{
  "version": 3,
  "sources": ["../lib/accessors.js", "../lib/main.js", "../lib/ndarray.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2022 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Object} input array object\n*\n* @example\n* var Complex64Array = require( '@stdlib/array-complex64' );\n* var Complex64 = require( '@stdlib/complex-float32' );\n* var reinterpret64 = require( '@stdlib/strided-base-reinterpret-complex64' );\n*\n* function setter( data, idx, value ) {\n*     data.set( value, idx );\n* }\n*\n* var data = new Complex64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n*\n* var x = {\n*     'data': data,\n*     'accessors': [ null, setter ]\n* };\n*\n* var alpha = new Complex64( 5.0, 5.0 );\n*\n* gfill( data.length, alpha, x, 1, 0 );\n*\n* var view = reinterpret64( x.data, 0 );\n* // view => <Float32Array>[ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, stride, offset ) {\n\tvar xbuf;\n\tvar set;\n\tvar ix;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tset = x.accessors[ 1 ];\n\n\tix = offset;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tset( xbuf, ix, alpha );\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gfill;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @returns {Collection} input array\n*\n* @example\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill( x.length, 5.0, x, 1 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, stride ) {\n\tvar ix;\n\tvar i;\n\tvar m;\n\tvar o;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\tif ( stride < 0 ) {\n\t\t\tix = (1-N) * stride;\n\t\t} else {\n\t\t\tix = 0;\n\t\t}\n\t\taccessors( N, alpha, o, stride, ix );\n\t\treturn o.data;\n\t}\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ i ] = alpha;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ i ] = alpha;\n\t\t\tx[ i+1 ] = alpha;\n\t\t\tx[ i+2 ] = alpha;\n\t\t\tx[ i+3 ] = alpha;\n\t\t\tx[ i+4 ] = alpha;\n\t\t\tx[ i+5 ] = alpha;\n\t\t\tx[ i+6 ] = alpha;\n\t\t\tx[ i+7 ] = alpha;\n\t\t}\n\t\treturn x;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gfill;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\nvar accessors = require( './accessors.js' );\n\n\n// VARIABLES //\n\nvar M = 8;\n\n\n// MAIN //\n\n/**\n* Fills a strided array with a specified scalar constant.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {*} alpha - scalar\n* @param {Collection} x - input array\n* @param {integer} stride - index increment\n* @param {NonNegativeInteger} offset - starting index\n* @returns {Collection} input array\n*\n* @example\n* var x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n*\n* gfill( 3, 5.0, x, 1, x.length-3 );\n* // x => [ 1.0, -2.0, 3.0, 5.0, 5.0, 5.0 ]\n*/\nfunction gfill( N, alpha, x, stride, offset ) {\n\tvar ix;\n\tvar m;\n\tvar o;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn x;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\taccessors( N, alpha, o, stride, offset );\n\t\treturn o.data;\n\t}\n\tix = offset;\n\n\t// Use loop unrolling if the stride is equal to `1`...\n\tif ( stride === 1 ) {\n\t\tm = N % M;\n\n\t\t// If we have a remainder, run a clean-up loop...\n\t\tif ( m > 0 ) {\n\t\t\tfor ( i = 0; i < m; i++ ) {\n\t\t\t\tx[ ix ] = alpha;\n\t\t\t\tix += stride;\n\t\t\t}\n\t\t}\n\t\tif ( N < M ) {\n\t\t\treturn x;\n\t\t}\n\t\tfor ( i = m; i < N; i += M ) {\n\t\t\tx[ ix ] = alpha;\n\t\t\tx[ ix+1 ] = alpha;\n\t\t\tx[ ix+2 ] = alpha;\n\t\t\tx[ ix+3 ] = alpha;\n\t\t\tx[ ix+4 ] = alpha;\n\t\t\tx[ ix+5 ] = alpha;\n\t\t\tx[ ix+6 ] = alpha;\n\t\t\tx[ ix+7 ] = alpha;\n\t\t\tix += M;\n\t\t}\n\t\treturn x;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tx[ ix ] = alpha;\n\t\tix += stride;\n\t}\n\treturn x;\n}\n\n\n// EXPORTS //\n\nmodule.exports = gfill;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fill a strided array with a specified scalar constant.\n*\n* @module @stdlib/blas-ext-base-gfill\n*\n* @example\n* var gfill = require( '@stdlib/blas-ext-base-gfill' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill( x.length, 5.0, x, 1 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*\n* @example\n* var gfill = require( '@stdlib/blas-ext-base-gfill' );\n*\n* var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n*\n* gfill.ndarray( x.length, 5.0, x, 1, 0 );\n* // x => [ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_accessors", "__commonJSMin", "exports", "module", "gfill", "N", "alpha", "x", "stride", "offset", "xbuf", "set", "ix", "i", "require_main", "__commonJSMin", "exports", "module", "arraylike2object", "accessors", "M", "gfill", "N", "alpha", "x", "stride", "ix", "i", "m", "o", "require_ndarray", "__commonJSMin", "exports", "module", "arraylike2object", "accessors", "M", "gfill", "N", "alpha", "x", "stride", "offset", "ix", "m", "o", "i", "setReadOnly", "main", "ndarray"]
}
